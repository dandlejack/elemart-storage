[{"D:\\Work\\elemart-storage\\src\\index.tsx":"1","D:\\Work\\elemart-storage\\src\\reportWebVitals.ts":"2","D:\\Work\\elemart-storage\\src\\App.tsx":"3","D:\\Work\\elemart-storage\\src\\Pages.tsx":"4","D:\\Work\\elemart-storage\\src\\pages\\LoginPage\\LoginPage.tsx":"5","D:\\Work\\elemart-storage\\src\\components\\SideMenu\\SideMenu.tsx":"6","D:\\Work\\elemart-storage\\src\\pages\\CustomerPage\\CustomerPage.tsx":"7","D:\\Work\\elemart-storage\\src\\pages\\ProductPage\\ProductPage.tsx":"8","D:\\Work\\elemart-storage\\src\\api\\CustomerApi.ts":"9","D:\\Work\\elemart-storage\\src\\config.ts":"10","D:\\Work\\elemart-storage\\src\\services\\CustomerService.ts":"11","D:\\Work\\elemart-storage\\src\\components\\CustomModal\\CustomModal.tsx":"12","D:\\Work\\elemart-storage\\src\\components\\CustomerForm\\CustomerForm.tsx":"13","D:\\Work\\elemart-storage\\src\\pages\\PaidInvoicePage\\PaidInvoicePage.tsx":"14","D:\\Work\\elemart-storage\\src\\pages\\ReceivedPage\\ReceivedInvoicePage.tsx":"15","D:\\Work\\elemart-storage\\src\\api\\PaidApi.ts":"16","D:\\Work\\elemart-storage\\src\\components\\PaidInvoiceForm\\PaidInvoiceForm.tsx":"17","D:\\Work\\elemart-storage\\src\\components\\EditTable\\EditableCell.tsx":"18","D:\\Work\\elemart-storage\\src\\components\\EditTable\\EditableTable.tsx":"19","D:\\Work\\elemart-storage\\src\\api\\ReceivedApi.ts":"20","D:\\Work\\elemart-storage\\src\\mocks\\ProductMocks.ts":"21","D:\\Work\\elemart-storage\\src\\api\\ProductApi.ts":"22","D:\\Work\\elemart-storage\\src\\components\\PaidInfo\\PaidInfo.tsx":"23","D:\\Work\\elemart-storage\\src\\mocks\\ColumnMocks.ts":"24","D:\\Work\\elemart-storage\\src\\components\\ReceivedInfo\\ReceivedInfo.tsx":"25","D:\\Work\\elemart-storage\\src\\components\\ReceivedInvoiceForm\\ReceivedInvoiceForm.tsx":"26","D:\\Work\\elemart-storage\\src\\components\\ProductInfo\\ProductInfo.tsx":"27","D:\\Work\\elemart-storage\\src\\components\\ProductForm\\ProductForm.tsx":"28","D:\\Work\\elemart-storage\\src\\components\\Auth\\auth-context.tsx":"29","D:\\Work\\elemart-storage\\src\\utils\\removeDuplicate.tsx":"30","D:\\Work\\elemart-storage\\src\\components\\CustomerInfo\\CustomerInfo.tsx":"31","D:\\Work\\elemart-storage\\src\\components\\Excel\\ExcelComponent.tsx":"32","D:\\Work\\elemart-storage\\src\\components\\RouteComponent\\PrivateRoute.tsx":"33","D:\\Work\\elemart-storage\\src\\components\\RouteComponent\\PublicRoute.tsx":"34","D:\\Work\\elemart-storage\\src\\components\\LogoutComponent\\LogoutComponent.tsx":"35","D:\\Work\\elemart-storage\\src\\api\\UserApi.ts":"36","D:\\Work\\elemart-storage\\src\\components\\FilterTables\\FilterTables.tsx":"37","D:\\Work\\elemart-storage\\src\\components\\SearchBar\\InputSearch.tsx":"38"},{"size":531,"mtime":1606893739497,"results":"39","hashOfConfig":"40"},{"size":425,"mtime":499162500000,"results":"41","hashOfConfig":"40"},{"size":1346,"mtime":1616124072365,"results":"42","hashOfConfig":"40"},{"size":2321,"mtime":1618887173710,"results":"43","hashOfConfig":"40"},{"size":2093,"mtime":1616136515961,"results":"44","hashOfConfig":"40"},{"size":1567,"mtime":1616123770124,"results":"45","hashOfConfig":"40"},{"size":3209,"mtime":1620805461677,"results":"46","hashOfConfig":"40"},{"size":6918,"mtime":1621826233688,"results":"47","hashOfConfig":"40"},{"size":1154,"mtime":1620804457794,"results":"48","hashOfConfig":"40"},{"size":88,"mtime":1607343499596,"results":"49","hashOfConfig":"40"},{"size":263,"mtime":1607344435947,"results":"50","hashOfConfig":"40"},{"size":606,"mtime":1607401486856,"results":"51","hashOfConfig":"40"},{"size":1134,"mtime":1621838755335,"results":"52","hashOfConfig":"40"},{"size":7749,"mtime":1621915598149,"results":"53","hashOfConfig":"40"},{"size":8753,"mtime":1621912592164,"results":"54","hashOfConfig":"40"},{"size":1246,"mtime":1607654837848,"results":"55","hashOfConfig":"40"},{"size":4219,"mtime":1626672898782,"results":"56","hashOfConfig":"40"},{"size":7206,"mtime":1626678286442,"results":"57","hashOfConfig":"40"},{"size":5668,"mtime":1626672082545,"results":"58","hashOfConfig":"40"},{"size":1632,"mtime":1608265309181,"results":"59","hashOfConfig":"40"},{"size":580869,"mtime":1607411660706,"results":"60","hashOfConfig":"40"},{"size":1958,"mtime":1626672639645,"results":"61","hashOfConfig":"40"},{"size":7639,"mtime":1616136477545,"results":"62","hashOfConfig":"40"},{"size":4735,"mtime":1626672135335,"results":"63","hashOfConfig":"40"},{"size":6727,"mtime":1620806181942,"results":"64","hashOfConfig":"40"},{"size":4531,"mtime":1621497120030,"results":"65","hashOfConfig":"40"},{"size":7017,"mtime":1626676384220,"results":"66","hashOfConfig":"40"},{"size":2500,"mtime":1621310431981,"results":"67","hashOfConfig":"40"},{"size":1974,"mtime":1621840634227,"results":"68","hashOfConfig":"40"},{"size":160,"mtime":1607664405503,"results":"69","hashOfConfig":"40"},{"size":5301,"mtime":1616136301015,"results":"70","hashOfConfig":"40"},{"size":5981,"mtime":1608268921128,"results":"71","hashOfConfig":"40"},{"size":592,"mtime":1621841009063,"results":"72","hashOfConfig":"40"},{"size":463,"mtime":1615958755664,"results":"73","hashOfConfig":"40"},{"size":319,"mtime":1615963792803,"results":"74","hashOfConfig":"40"},{"size":697,"mtime":1616136288541,"results":"75","hashOfConfig":"40"},{"size":2334,"mtime":1621822879099,"results":"76","hashOfConfig":"40"},{"size":598,"mtime":1621912583657,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"1byo7du",{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"80"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"80"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"80"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"80"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"80"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"80"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"80"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"80"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"80"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"80"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"80"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"80"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"80"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"80"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"80"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"80"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"80"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"80"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"80"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"80"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Work\\elemart-storage\\src\\index.tsx",[],["175","176"],"D:\\Work\\elemart-storage\\src\\reportWebVitals.ts",[],"D:\\Work\\elemart-storage\\src\\App.tsx",["177"],"import React from 'react';\nimport './App.css';\nimport { Layout } from 'antd'\nimport { Pages } from './Pages';\nimport { Page } from './types/Page';\nimport { BrowserRouter as Router, Switch } from 'react-router-dom'\nimport { SideMenuWithRouter } from './components/SideMenu/SideMenu';\nimport { AuthProvider } from './components/Auth/auth-context';\nimport { PublicRoute } from './components/RouteComponent/PublicRoute';\nimport { LoginPage } from './pages/LoginPage/LoginPage';\nimport { PrivateRoute } from './components/RouteComponent/PrivateRoute';\nconst { Sider, Content, Header } = Layout\nexport const App: React.FC = () => {\n  return (\n    <AuthProvider>\n      <Layout className='main' style={{ height: '100%' }} key='layout-main'>\n        <Router>\n          <Layout className='content' >\n            <Sider className='sider'>\n              <SideMenuWithRouter /> \n            </Sider>\n            <Content id=\"content-main\">\n              <Switch>\n                <PublicRoute component={LoginPage} path='/login' />\n                {Pages.map((page: Page) => {\n                  return (\n                    <PrivateRoute component={page.component} path={page.path} exact />\n                  );\n                })}\n              </Switch>\n            </Content>\n          </Layout>\n        </Router>\n      </Layout>\n    </AuthProvider>\n  );\n}\n","D:\\Work\\elemart-storage\\src\\Pages.tsx",["178","179","180"],"import { Page } from './types/Page'\r\nimport { App } from './App'\r\nimport { LoginPage } from './pages/LoginPage/LoginPage'\r\nimport { ProductPage } from './pages/ProductPage/ProductPage'\r\nimport { CustomerPage } from './pages/CustomerPage/CustomerPage'\r\nimport { PaidInvoicePage } from './pages/PaidInvoicePage/PaidInvoicePage'\r\nimport { ReceivedInvoicePage } from './pages/ReceivedPage/ReceivedInvoicePage'\r\nimport { PaidInfo } from './components/PaidInfo/PaidInfo'\r\nimport { ReceivedInfo } from './components/ReceivedInfo/ReceivedInfo'\r\nimport { ProductInfo } from './components/ProductInfo/ProductInfo'\r\nimport { CustomerInfo } from './components/CustomerInfo/CustomerInfo'\r\nimport Cookie from 'js-cookie';\r\nimport { LogoutComponent } from './components/LogoutComponent/LogoutComponent'\r\nexport const Pages: Page[] = [\r\n    {\r\n        title: 'สินค้า',\r\n        component: ProductPage,\r\n        path: '/',\r\n        show: true,\r\n        privateRoute: true\r\n    },\r\n    {\r\n        title: 'รายงานรับ',\r\n        component: ReceivedInvoicePage,\r\n        path: '/received',\r\n        show: true,\r\n        privateRoute: true\r\n    },\r\n    {\r\n        title: 'รายงานขาย',\r\n        component: PaidInvoicePage,\r\n        path: '/paid',\r\n        show: true,\r\n        privateRoute: true\r\n    },\r\n    {\r\n        title: 'Customer',\r\n        component: CustomerPage,\r\n        path: '/customer',\r\n        show: true,\r\n        privateRoute: true\r\n    },\r\n    {\r\n        title: 'รายการขาย',\r\n        path: '/paid/:id',\r\n        component: PaidInfo,\r\n        show: false,\r\n        privateRoute: true\r\n    },\r\n    {\r\n        title: 'รายการซื้อ',\r\n        path: '/received/:id',\r\n        component: ReceivedInfo,\r\n        show: false,\r\n        privateRoute: true\r\n    },\r\n    {\r\n        title: 'สินค้า',\r\n        path: '/product/:id',\r\n        component: ProductInfo,\r\n        show: false,\r\n        privateRoute: true\r\n    },\r\n    {\r\n        title: 'ลูกค้า',\r\n        path: '/customer/:id',\r\n        component: CustomerInfo,\r\n        show: false,\r\n        privateRoute: true\r\n    },\r\n    {\r\n        title: 'Logout',\r\n        path: '/logout',\r\n        component:LogoutComponent,\r\n        show: true,\r\n        privateRoute: true\r\n    }\r\n]","D:\\Work\\elemart-storage\\src\\pages\\LoginPage\\LoginPage.tsx",["181","182","183"],"import React, { useEffect, useState } from 'react';\r\nimport './Login.css';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\nimport { useAuth } from '../../components/Auth/auth-context';\r\ninterface LoginInterface {\r\n  username:string;\r\n  password:string;\r\n}\r\nexport const LoginPage: React.FC = () => {\r\n  const [msg, setMsg] = useState('');\r\n  const { signIn, myAccount } = useAuth();\r\n\r\n  const onLogin = async (values: any) => {\r\n    // setLoadingState(true);\r\n    try {\r\n      const res = await signIn({\r\n        username: values.username,\r\n        password: values.password,\r\n      });\r\n      if(res === 'username or password wrong') setMsg(res);\r\n    } catch {\r\n      console.log('Login Error');\r\n    }\r\n  };\r\n\r\n  return (\r\n          <Form className={'login-form'} onFinish={onLogin}>\r\n            <Form.Item\r\n              label=\"\"\r\n              name=\"username\"\r\n              rules={[{ required: true, message: 'กรุณากรอก Username' }]}\r\n            >\r\n              <Input\r\n                size=\"large\"\r\n                prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n                placeholder=\"Username\"\r\n                className={'uinput'}\r\n              />\r\n            </Form.Item>\r\n            <Form.Item\r\n              label=\"\"\r\n              name=\"password\"\r\n              rules={[{ required: true, message: 'กรุณากรอกรหัสผ่าน' }]}\r\n            >\r\n              <Input.Password\r\n                size=\"large\"\r\n                prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                placeholder=\"Password\"\r\n                className={'uinput'}\r\n              />\r\n            </Form.Item>\r\n            <div style={{textAlign:'center'}}>\r\n              <span style={{ fontSize: 16, color: 'red'}}>{msg}</span>\r\n            </div>\r\n            <Form.Item>\r\n              <Button type=\"primary\" className=\"buttonT\" htmlType=\"submit\">\r\n                Login\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n  );\r\n};\r\n","D:\\Work\\elemart-storage\\src\\components\\SideMenu\\SideMenu.tsx",["184"],"import React, { useState, useEffect } from 'react';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport { Page } from '../../types/Page';\r\nimport { Pages } from '../../Pages';\r\nimport { Menu,Typography } from 'antd';\r\nimport { Header } from 'antd/lib/layout/layout';\r\nimport './style.css'\r\nimport { useAuth } from '../Auth/auth-context';\r\nconst {Title} = Typography\r\ntype SideMenuProps = RouteComponentProps<{}>;\r\n\r\nconst SideMenu = ({ history }: SideMenuProps) => {\r\n  const [activePage, setActivePage] = useState(Pages[0].title);\r\n  const {myAccount} = useAuth()\r\n  const cpMyAccout = JSON.parse(JSON.stringify(myAccount))\r\n  const navigateToPage = (e:any,page: any) => {\r\n    history.push(page.path);\r\n    setActivePage(page.title);\r\n  };  \r\n  return (\r\n    <>\r\n    <Header className='header'>\r\n          <div>\r\n            <div className='company-title'>\r\n              <Title level={3}>ELE-MART</Title>\r\n            </div>\r\n          </div>\r\n      </Header>\r\n    <Menu \r\n      key=\"SideMenu\"\r\n      activeKey={activePage}\r\n      defaultSelectedKeys={[activePage]}\r\n      className='outside-menu'\r\n      mode=\"inline\">\r\n      {cpMyAccout.login && Pages.map((page: Page, index: number) => {\r\n        if(!page.show) return <></>\r\n        return (\r\n          <Menu.Item\r\n          onClick={(e) => navigateToPage(e,page)}\r\n            key={page.title}\r\n          >\r\n            <span>{page.title}</span>\r\n          </Menu.Item>\r\n        )\r\n      })}\r\n    </Menu>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const SideMenuWithRouter = withRouter(SideMenu);\r\n","D:\\Work\\elemart-storage\\src\\pages\\CustomerPage\\CustomerPage.tsx",["185","186"],"import React, { useEffect, useState } from 'react'\r\nimport { Button, Input, Popconfirm, Result, Table } from 'antd'\r\nimport { Link } from 'react-router-dom';\r\nimport { loadCustomers } from '../../services/CustomerService'\r\nimport { CustomerApi } from '../../api/CustomerApi'\r\nimport { PlusOutlined } from '@ant-design/icons'\r\nimport { CustomModal } from '../../components/CustomModal/CustomModal';\r\nimport { CustomerForm } from '../../components/CustomerForm/CustomerForm';\r\n\r\nconst onCancel = (e: any) => { };\r\nconst onConfirm = (id: string) => {\r\n    CustomerApi.deleteCustomerById(id);\r\n    window.location.reload();\r\n};\r\nconst column = [\r\n    {\r\n        title: 'ชื่อลูกค้า',\r\n        dataIndex: 'customer_name',\r\n        key: 'customerName'\r\n    },\r\n    {\r\n        title: 'operation',\r\n        dataIndex: 'operation',\r\n        render: (text: string, record: any) => <>\r\n            <Link to={{ pathname: '/customer/' + record._id }}>\r\n                <Button key={record._id} type='primary'>ดูรายละเอียด</Button>\r\n            </Link>\r\n            <Popconfirm\r\n                title=\"คุณต้องการลบรายงานนี้?\"\r\n                onConfirm={() => onConfirm(record._id)}\r\n                onCancel={onCancel}\r\n                okText=\"Yes\"\r\n                cancelText=\"No\"\r\n            >\r\n                <Button type='primary' danger style={{ marginLeft: 10 }}>Delete</Button>\r\n            </Popconfirm>\r\n        </>\r\n    }\r\n]\r\nexport const CustomerPage: React.FC = () => {\r\n    const [dataSource, setDataSource] = useState([])\r\n    const [modalVisible, setModalVisible] = useState(false)\r\n\r\n    useEffect(() => {\r\n        console.log('Effect is applied')\r\n        async function fetchCustomer() {\r\n            const response = await CustomerApi.getCustomer(20)\r\n            setDataSource(response)\r\n        }\r\n        fetchCustomer()\r\n        return () => {\r\n            console.log('unmount')\r\n        }\r\n    }, [])\r\n\r\n    const handleClose = (p: any) => {\r\n        localStorage.removeItem('product')\r\n        setModalVisible(false)\r\n    }\r\n\r\n    return (\r\n        <div key='customer-page'>\r\n            <div style={{ marginTop: 15 }}>\r\n                <div style={{ display: 'inline-flex', marginLeft: 15, alignItems: 'center' }}>\r\n                    <label>ค้นหา</label>\r\n                    <Input />\r\n                </div>\r\n                <div style={{ display: 'inline-block', float: 'right', marginRight: 15 }}>\r\n                    <Button type='primary' onClick={e => setModalVisible(true)}><PlusOutlined twoToneColor=\"#eb2f96\" /></Button>\r\n                </div>\r\n            </div>\r\n            <CustomModal modalTitle='เพิ่มลูกค้า' modalType=\"customer\" modalForm={<CustomerForm />} modalVisible={modalVisible} getClose={handleClose} />\r\n            <Table\r\n                style={{ margin: '15px 15px' }}\r\n                rowKey={record => record._id}\r\n                bordered\r\n                columns={column}\r\n                dataSource={dataSource}\r\n                pagination={{\r\n                    pageSize: 50\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}","D:\\Work\\elemart-storage\\src\\pages\\ProductPage\\ProductPage.tsx",["187","188","189","190","191","192"],"import { PlusOutlined } from '@ant-design/icons'\r\nimport { Button, Input, Layout, Popconfirm, Select, Table } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { ProductApi } from '../../api/ProductApi'\r\nimport { CustomModal } from '../../components/CustomModal/CustomModal'\r\nimport { ProductForm } from '../../components/ProductForm/ProductForm'\r\nimport { productMocks } from '../../mocks/ProductMocks'\r\nimport { addFilter } from '../../components/FilterTables/FilterTables'\r\n\r\nconst { Header } = Layout\r\n\r\nconst onCancel = (e: any) => { };\r\nconst onConfirm = (id: string) => {\r\n    ProductApi.deleteProductById(id);\r\n    window.location.reload();\r\n};\r\nconst column = [\r\n    {\r\n        title: 'รหัสสินค้า',\r\n        dataIndex: 'product_id',\r\n        dataType: 'string',\r\n        key: 'product_id',\r\n    },\r\n    {\r\n        title: 'ชื่อสินค้า',\r\n        dataIndex: 'product_name',\r\n        dataType: 'string',\r\n        key: 'product_name',\r\n    },\r\n    {\r\n        title: 'Operation',\r\n        dataIndex: 'operation',\r\n        key: 'operation',\r\n        render: (text: string, record: any) => <>\r\n            <Link to={'/product/' + record._id}>\r\n                <Button type='primary'>ดูรายละเอียด</Button>\r\n            </Link>\r\n            <Popconfirm\r\n                title=\"คุณต้องการลบรายงานนี้?\"\r\n                onConfirm={() => onConfirm(record._id)}\r\n                onCancel={onCancel}\r\n                okText=\"Yes\"\r\n                cancelText=\"No\"\r\n            >\r\n                <Button type='primary' danger style={{ marginLeft: 10 }}>Delete</Button>\r\n            </Popconfirm>\r\n        </>\r\n    }\r\n]\r\n\r\nexport const ProductPage: React.FC = () => {\r\n    const [dataSource, setDataSource] = useState({\r\n        data: [],\r\n        message: '',\r\n        pageNumber: 1,\r\n        totalDocument: 1,\r\n        totalPage: 1,\r\n        pageSize: 20\r\n    })\r\n    const [fetchInput, setFetchInput] = useState({\r\n        searchType: 'product_id',\r\n        inputData: ''\r\n    })\r\n    const [modalVisible, setModalVisible] = useState(false)\r\n\r\n    const fetchDefaultProductData = async () => {\r\n        const res = await ProductApi.getAllProduct({\r\n            limitPage: dataSource.pageSize,\r\n            pageNumber: dataSource.pageNumber\r\n        })\r\n        return res\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchProduct = async () => {\r\n            const res = await fetchDefaultProductData()\r\n            setDataSource(res)\r\n        }\r\n        fetchProduct()\r\n        return () => {\r\n            console.log('unmount')\r\n        }\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchProduct = async () => {\r\n            if (fetchInput.inputData === '') {\r\n                const res = await fetchDefaultProductData()\r\n                setDataSource(res)\r\n            } else {\r\n                const result = await ProductApi.getAllProduct({\r\n                    limitPage: dataSource.pageSize,\r\n                    pageNumber: dataSource.pageNumber,\r\n                    filterObject: { product_id: { '$regex': `.*${fetchInput.inputData}.*` } }\r\n                }).then(res => {\r\n                    setDataSource(res)\r\n                    return res.data\r\n                })\r\n            }\r\n\r\n        }\r\n        fetchProduct()\r\n        return () => {\r\n            console.log('unmount')\r\n        }\r\n    }, [dataSource.pageNumber])\r\n\r\n    const handleClose = () => {\r\n        setModalVisible(false)\r\n    }\r\n\r\n    const handleClick = async () => {\r\n        if (fetchInput.searchType === 'product_id') {\r\n            const result = await ProductApi.searchProduct({\r\n                filterObject: { product_id: { '$regex': `.*${fetchInput.inputData}.*` } }\r\n            }).then(res => {\r\n                setDataSource(res)\r\n                return res.data\r\n            })\r\n            return result\r\n        } else {\r\n            const result = await ProductApi.searchProduct({\r\n                filterObject: { product_name: { '$regex': `.*${fetchInput.inputData}.*` } }\r\n            }).then(res => {\r\n                setDataSource(res)\r\n                return res.data\r\n            })\r\n            return result\r\n        }\r\n    }\r\n\r\n    const handleReset = async () => {\r\n        setFetchInput(\r\n            {\r\n                inputData: '',\r\n                searchType: fetchInput.searchType\r\n            }\r\n        )\r\n        const res = await fetchDefaultProductData()\r\n        setDataSource(res)\r\n\r\n    }\r\n    return <div key='invoice-page' className={'invoice-page'}>\r\n        <div style={{ marginTop: 15 }}>\r\n            <div style={{ display: 'inline-block', float: 'right', marginRight: 15 }}>\r\n                <Button type='primary' onClick={e => setModalVisible(true)}><PlusOutlined twoToneColor=\"#eb2f96\" /></Button>\r\n            </div>\r\n            <div>\r\n                <Select defaultValue='product_id' style={{ marginRight: 10, marginLeft: 15 }} onChange={e => setFetchInput({\r\n                    searchType: e,\r\n                    inputData: fetchInput.inputData\r\n                })} >\r\n                    <Select.Option value='product_id'>รหัสสินค้า</Select.Option>\r\n                    <Select.Option value='product_name'>ชื่อสินค้า</Select.Option>\r\n                </Select>\r\n                <Input style={{ width: 200, marginRight: 10 }} value={fetchInput.inputData} onChange={e => setFetchInput({\r\n                    searchType: fetchInput.searchType,\r\n                    inputData: e.target.value.toUpperCase()\r\n                })} onPressEnter={handleClick} />\r\n                <Button style={{ marginRight: 10 }} type='primary' onClick={handleClick} >ค้นหา</Button>\r\n                <Button type='primary' danger onClick={handleReset} >RESET</Button>\r\n            </div>\r\n        </div>\r\n        <CustomModal modalTitle='สินค้า' modalType=\"received-invoice\" modalForm={<ProductForm />} modalWidth={380} modalVisible={modalVisible} getClose={handleClose} />\r\n        <Table\r\n            style={{ margin: '15px 15px' }}\r\n            bordered\r\n            dataSource={dataSource.data}\r\n            columns={column}\r\n            pagination={{\r\n                onChange: (page: any, pageSize: any) => {\r\n                    setDataSource({\r\n                        ...dataSource,\r\n                        pageNumber: page,\r\n                        pageSize: pageSize\r\n                    })\r\n                },\r\n                current: dataSource.pageNumber,\r\n                total: dataSource.totalDocument,\r\n                pageSize: dataSource.pageSize,\r\n                defaultCurrent: 1,\r\n                defaultPageSize: dataSource.pageSize,\r\n                pageSizeOptions: ['20', '50', '100', '250']\r\n            }}\r\n        />\r\n    </div>\r\n}","D:\\Work\\elemart-storage\\src\\api\\CustomerApi.ts",[],"D:\\Work\\elemart-storage\\src\\config.ts",[],"D:\\Work\\elemart-storage\\src\\services\\CustomerService.ts",[],"D:\\Work\\elemart-storage\\src\\components\\CustomModal\\CustomModal.tsx",["193","194","195"],"import {ReactChild, useEffect,useState} from 'react'\r\nimport {Modal} from 'antd'\r\nimport {CustomerForm} from '../CustomerForm/CustomerForm'\r\ninterface ModalProps {\r\n    modalTitle:string;\r\n    modalType:string;\r\n    modalVisible:boolean;\r\n    getClose:Function;\r\n    modalForm:ReactChild;\r\n    modalWidth?:number;\r\n}\r\nexport const CustomModal:React.FC<ModalProps> = (props) => {\r\n    return <>\r\n    <Modal key='modal-comp' visible={props.modalVisible} title={props.modalTitle} width={props.modalWidth} onCancel={e=>props.getClose(false)} footer={false}>\r\n        {props.modalForm}\r\n    </Modal>\r\n    </>\r\n}","D:\\Work\\elemart-storage\\src\\components\\CustomerForm\\CustomerForm.tsx",["196"],"import {useState,useEffect} from 'react'\r\nimport {Button, Input} from 'antd'\r\nimport { CustomerApi } from '../../api/CustomerApi'\r\nexport const CustomerForm:React.FC = () =>{\r\n    const [customerName, setCustomerName] = useState('')\r\n    const [showHaveAccount, setShowHaveAccount] = useState(false)\r\n    const onSave = async () =>{\r\n        const obj:any = {\r\n            customer_name :customerName\r\n        }\r\n        const res = await CustomerApi.insertCustomer(obj)\r\n        if(typeof(res.data) === 'string'){\r\n            setShowHaveAccount(true)\r\n        }else{\r\n            window.location.reload()\r\n        }\r\n    }\r\n    return <div>\r\n        <div>\r\n            <span>ชื่อลูกค้า</span>\r\n            <Input onChange={e=>setCustomerName(e.target.value)} style={{width:'100%',marginLeft:15}} />\r\n        </div>\r\n        <div style={{margin:'15px auto',textAlign:'center'}}>\r\n            <Button type='primary' onClick={onSave}>Submit</Button>\r\n        </div>\r\n        {showHaveAccount? <span style={{color:'red'}}>มีชื่อลูกค้ารายนี้แล้ว</span>:null}\r\n    </div>\r\n}","D:\\Work\\elemart-storage\\src\\pages\\PaidInvoicePage\\PaidInvoicePage.tsx",["197","198"],"import { PlusOutlined } from '@ant-design/icons'\r\nimport { Button, DatePicker, Input, Layout, Popconfirm, Select, Table } from 'antd'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { PaidApi } from '../../api/PaidApi'\r\nimport { PaidInvoiceForm } from '../../components/PaidInvoiceForm/PaidInvoiceForm'\r\nimport { CustomModal } from '../../components/CustomModal/CustomModal'\r\nimport { paidColumn } from '../../mocks/ColumnMocks'\r\nimport './style.css'\r\nimport { ProductApi } from '../../api/ProductApi'\r\n\r\nconst { Header } = Layout\r\nconst { RangePicker } = DatePicker\r\nconst onCancel = (e: any) => { };\r\nconst onConfirm = (id: string) => {\r\n    PaidApi.deleteInvoiceById(id);\r\n    window.location.reload();\r\n};\r\n\r\nconst fetchDefaultPaidData = async (params: any) => {\r\n    return await PaidApi.getPaidInvoice({\r\n        filterObject: params\r\n    }).then(res => {\r\n        console.log(res)\r\n        return res\r\n    })\r\n}\r\n\r\nconst convertCustomerIdToCustomerName = (data: any) => {\r\n    const localCustomerData = localStorage.getItem('customer')\r\n    if (localCustomerData !== null) {\r\n        const customerData = JSON.parse(localCustomerData)\r\n        data.data.map((data: any) => {\r\n            const findData = customerData.find((cusData: any) => cusData._id === data.customer_name)\r\n            data.customer_name = findData.customer_name\r\n        })\r\n        return data\r\n    }\r\n}\r\nconst column = [\r\n    {\r\n        title: 'วันที่',\r\n        dataIndex: 'invoice_date',\r\n        key: 'invoice_date',\r\n    },\r\n    {\r\n        title: 'หมายเลข Invoice',\r\n        dataIndex: 'invoice_id',\r\n        key: 'invoice_id',\r\n    },\r\n    {\r\n        title: 'ลูกค้า',\r\n        dataIndex: 'customer_name',\r\n        key: 'customer_name',\r\n    },\r\n    {\r\n        title: 'Operation',\r\n        dataIndex: 'operation',\r\n        key: 'operation',\r\n        render: (text: string, record: any) => <>\r\n            <Link to={'/paid/' + record._id}>\r\n                <Button type='primary'>ดูรายละเอียด</Button>\r\n            </Link>\r\n            <Popconfirm\r\n                title=\"คุณต้องการลบรายงานนี้?\"\r\n                onConfirm={() => onConfirm(record._id)}\r\n                onCancel={onCancel}\r\n                okText=\"Yes\"\r\n                cancelText=\"No\"\r\n            >\r\n                <Button type='primary' danger style={{ marginLeft: 10 }}>Delete</Button>\r\n            </Popconfirm>\r\n        </>\r\n    }\r\n]\r\nexport const PaidInvoicePage: React.FC = () => {\r\n    const [dataSource, setDataSource] = useState({\r\n        data: [],\r\n        message: '',\r\n        pageNumber: 1,\r\n        totalDocument: 1,\r\n        totalPage: 1,\r\n        pageSize: 20\r\n    })\r\n    const [modalVisible, setModalVisible] = useState(false)\r\n    const [fetchInput, setFetchInput] = useState({\r\n        selectType: 'date',\r\n        invoice_id: '',\r\n        range_date: ['', ''],\r\n    })\r\n    useEffect(() => {\r\n        async function fetchPaidInvoice() {\r\n            const response = await PaidApi.getPaidInvoice(50)\r\n            const localCustomerData = localStorage.getItem('customer')\r\n            if (localCustomerData !== null) {\r\n                const customerData = JSON.parse(localCustomerData)\r\n                response.data.map((data: any) => {\r\n                    const findData = customerData.find((cusData: any) => cusData._id === data.customer_name)\r\n                    data.customer_name = findData.customer_name\r\n                    return findData\r\n                })\r\n                setDataSource(response)\r\n            }\r\n        }\r\n\r\n        fetchPaidInvoice()\r\n        return () => {\r\n            console.log('unmount')\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        async function fetchProduct() {\r\n            if (modalVisible) {\r\n                const response = await ProductApi.getAllProduct({\r\n                    limitPage: 0\r\n                })\r\n                localStorage.setItem('product', JSON.stringify(response.data))\r\n            }\r\n        }\r\n        fetchProduct()\r\n        return () => {\r\n            console.log('unmount')\r\n        }\r\n    }, [modalVisible])\r\n\r\n    const handleClose = (p: any) => {\r\n        setModalVisible(false)\r\n        localStorage.removeItem('product')\r\n    }\r\n    const handleClick = async () => {\r\n        if (fetchInput.selectType === 'date') {\r\n            const startDate = new Date(fetchInput.range_date[0])\r\n            const endDate = new Date(fetchInput.range_date[1])\r\n            \r\n            const fetchData = await fetchDefaultPaidData({ createdDate: { '$gte': startDate, '$lte': endDate } })\r\n            const result = convertCustomerIdToCustomerName(fetchData)\r\n            setDataSource(result)\r\n\r\n        } else {\r\n            const fetchData = await fetchDefaultPaidData({ invoice_id: { '$regex': `.*${fetchInput.invoice_id}.*` } })\r\n            const result = convertCustomerIdToCustomerName(fetchData)\r\n            setDataSource(result)\r\n        }\r\n    }\r\n\r\n    const handleReset = async () => {\r\n        setFetchInput(\r\n            {\r\n                invoice_id: '',\r\n                selectType: fetchInput.selectType,\r\n                range_date: []\r\n            }\r\n        )\r\n        const fetchData = await fetchDefaultPaidData({})\r\n        const result = convertCustomerIdToCustomerName(fetchData)\r\n        setDataSource(result)\r\n    }\r\n    return <div key='invoice-page' className={'invoice-page'}>\r\n        <div style={{ marginTop: 15 }}>\r\n            <div style={{ display: 'inline-flex', marginLeft: 15, alignItems: 'center' }}>\r\n                <Select defaultValue='date' style={{ marginRight: 10 }} onChange={e => setFetchInput({\r\n                    selectType: e,\r\n                    invoice_id: fetchInput.invoice_id,\r\n                    range_date: fetchInput.range_date\r\n                })}>\r\n                    <Select.Option value='date'>วันที่</Select.Option>\r\n                    <Select.Option value='invoice'>หมายเลข Invoice</Select.Option>\r\n                </Select>\r\n            </div>\r\n            {fetchInput.selectType === 'date' ? <RangePicker style={{ marginRight: 15 }} onChange={(date, dateString) => setFetchInput({\r\n                selectType: fetchInput.selectType,\r\n                invoice_id: fetchInput.invoice_id,\r\n                range_date: dateString\r\n            })} /> :\r\n                <Input style={{ width: 200, marginRight: 15 }} value={fetchInput.invoice_id} onChange={e => setFetchInput({\r\n                    selectType: fetchInput.selectType,\r\n                    invoice_id: e.target.value.toUpperCase(),\r\n                    range_date: fetchInput.range_date\r\n                })} />\r\n            }\r\n            <Button style={{ marginRight: 10 }} type='primary' onClick={handleClick} >ค้นหา</Button>\r\n            <Button type='primary' danger onClick={handleReset} >RESET</Button>\r\n            <div style={{ display: 'inline-block', float: 'right', marginRight: 15 }}>\r\n                <Button type='primary' onClick={e => setModalVisible(true)}><PlusOutlined twoToneColor=\"#eb2f96\" /></Button>\r\n            </div>\r\n        </div>\r\n        <CustomModal modalTitle='รายการขาย' modalType=\"paid-invoice\" modalForm={<PaidInvoiceForm column={paidColumn} />} modalWidth={1400} modalVisible={modalVisible} getClose={handleClose} />\r\n        <Table\r\n            style={{ margin: '15px 15px' }}\r\n            rowKey={record => record._id}\r\n            bordered\r\n            columns={column}\r\n            dataSource={dataSource.data}\r\n            pagination={{\r\n                pageSize: 50\r\n            }}\r\n        />\r\n    </div>\r\n}","D:\\Work\\elemart-storage\\src\\pages\\ReceivedPage\\ReceivedInvoicePage.tsx",["199","200","201","202","203","204","205","206","207"],"import { PlusOutlined } from '@ant-design/icons'\r\nimport { Input, Button, Table, Popconfirm, Select, DatePicker } from 'antd'\r\nimport { Link } from 'react-router-dom'\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport { PaidApi } from '../../api/PaidApi'\r\nimport { CustomModal } from '../../components/CustomModal/CustomModal'\r\nimport { PaidInvoiceForm } from '../../components/PaidInvoiceForm/PaidInvoiceForm'\r\nimport { ReceivedApi } from '../../api/ReceivedApi'\r\nimport { ReceivedInvoiceForm } from '../../components/ReceivedInvoiceForm/ReceivedInvoiceForm'\r\nimport { ProductApi } from '../../api/ProductApi'\r\nimport { receivedColumn } from '../../mocks/ColumnMocks'\r\nimport { CustomerApi } from '../../api/CustomerApi'\r\nimport { AuthProvider, useAuth } from '../../components/Auth/auth-context'\r\nimport { InputSearch } from '../../components/SearchBar/InputSearch'\r\n\r\nconst onCancel = (e: any) => { };\r\nconst onConfirm = (id: string) => {\r\n    ReceivedApi.deleteReceivedInvoiceById(id);\r\n    window.location.reload();\r\n};\r\nconst { RangePicker } = DatePicker\r\n\r\nconst fetchDefaultReceivedData = async (params: any) => {\r\n    return await ReceivedApi.getAllReceivedInvoice({\r\n        filterObject: params\r\n    }).then(res => {\r\n        return res\r\n    })\r\n}\r\nconst convertCustomerIdToCustomerName = (data: any) => {\r\n    const localCustomerData = localStorage.getItem('customer')\r\n    if (localCustomerData !== null) {\r\n        const customerData = JSON.parse(localCustomerData)\r\n        data.data.map((data: any) => {\r\n            const findData = customerData.find((cusData: any) => cusData._id === data.seller)\r\n            data.seller = findData.customer_name\r\n        })\r\n        return data\r\n    }\r\n}\r\nconst column = [\r\n    {\r\n        title: 'วันที่',\r\n        dataIndex: 'invoice_date',\r\n        key: 'invoice_date',\r\n    },\r\n    {\r\n        title: 'หมายเลข Invoice',\r\n        dataIndex: 'invoice_id',\r\n        key: 'invoice_id',\r\n    },\r\n    {\r\n        title: 'ผู้ขาย',\r\n        dataIndex: 'seller',\r\n        key: 'seller',\r\n    },\r\n    {\r\n        title: 'Operation',\r\n        dataIndex: 'operation',\r\n        key: 'operation',\r\n        render: (text: string, record: any) => <>\r\n            <Link to={'/received/' + record._id}>\r\n                <Button type='primary'>ดูรายละเอียด</Button>\r\n            </Link>\r\n            <Popconfirm\r\n                title=\"คุณต้องการลบรายงานนี้?\"\r\n                onConfirm={() => onConfirm(record._id)}\r\n                onCancel={onCancel}\r\n                okText=\"Yes\"\r\n                cancelText=\"No\"\r\n            >\r\n                <Button type='primary' danger style={{ marginLeft: 10 }}>Delete</Button>\r\n            </Popconfirm>\r\n        </>\r\n    }\r\n]\r\nexport const ReceivedInvoicePage: React.FC = () => {\r\n    const [dataSource, setDataSource] = useState({\r\n        data: [],\r\n        message: '',\r\n        pageNumber: 1,\r\n        totalDocument: 1,\r\n        totalPage: 1,\r\n        pageSize: 20\r\n    })\r\n    const [modalVisible, setModalVisible] = useState(false)\r\n    const [fetchInput, setFetchInput] = useState({\r\n        selectType: 'date',\r\n        invoice_id: '',\r\n        range_date: ['', ''],\r\n    })\r\n    const { signIn, myAccount } = useAuth();\r\n    useEffect(() => {\r\n        console.log('Effect is applied')\r\n        async function fetchPaidInvoice() {\r\n            const response = await ReceivedApi.getAllReceivedInvoice({\r\n                limitPage: 0\r\n            })\r\n            const localCustomerData = localStorage.getItem('customer')\r\n            if (localCustomerData !== null) {\r\n                const customerData = JSON.parse(localCustomerData)\r\n                response.data.map((data: any) => {\r\n                    const findData = customerData.find((cusData: any) => cusData._id === data.seller)\r\n                    data.seller = findData.customer_name\r\n                })\r\n                setDataSource(response)\r\n            }\r\n\r\n        }\r\n        async function fetchCustomer() {\r\n            const response = await CustomerApi.getAllCustomer()\r\n            localStorage.setItem('customer', JSON.stringify(response))\r\n        }\r\n\r\n        fetchCustomer()\r\n        fetchPaidInvoice()\r\n        return () => {\r\n            console.log('unmount')\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        async function fetchProduct() {\r\n            if (modalVisible) {\r\n                const response = await ProductApi.getAllProduct({\r\n                    limitPage: 0\r\n                })\r\n                localStorage.setItem('product', JSON.stringify(response.data))\r\n            }\r\n        }\r\n        fetchProduct()\r\n        return () => {\r\n            console.log('unmount')\r\n        }\r\n    }, [modalVisible])\r\n\r\n    const handleClose = (p: any) => {\r\n        localStorage.removeItem('product')\r\n        setModalVisible(false)\r\n    }\r\n\r\n    const handleClick = async () => {\r\n        if (fetchInput.selectType === 'date') {\r\n            const startDate = new Date(fetchInput.range_date[0])\r\n            const endDate = new Date(fetchInput.range_date[1])\r\n            await ReceivedApi.getAllReceivedInvoice({\r\n                filterObject: { createdDate: { '$gte': startDate, '$lte': endDate } }\r\n            }).then(res => {\r\n                console.log(res)\r\n                setDataSource(res)\r\n            })\r\n            const fetchData = await fetchDefaultReceivedData({createdDate: { '$gte': startDate, '$lte': endDate } })\r\n            const result = convertCustomerIdToCustomerName(fetchData)\r\n            setDataSource(result)\r\n\r\n        } else {\r\n            const fetchData = await fetchDefaultReceivedData({invoice_id: { '$regex': `.*${fetchInput.invoice_id}.*` }})\r\n            const result = convertCustomerIdToCustomerName(fetchData)\r\n            setDataSource(result)\r\n        }\r\n    }\r\n\r\n    const handleReset = async () => {\r\n        setFetchInput(\r\n            {\r\n                invoice_id: '',\r\n                selectType: fetchInput.selectType,\r\n                range_date: []\r\n            }\r\n        )\r\n        const fetchData = await fetchDefaultReceivedData({})\r\n        const result = convertCustomerIdToCustomerName(fetchData)\r\n        setDataSource(result)\r\n    }\r\n\r\n    return <div key='invoice-page' className={'invoice-page'}>\r\n        <div style={{ marginTop: 15 }}>\r\n            <div style={{ display: 'inline-flex', marginLeft: 15, alignItems: 'center' }}>\r\n                <Select defaultValue='date' style={{ marginRight: 10 }} onChange={e => setFetchInput({\r\n                    selectType: e,\r\n                    invoice_id: fetchInput.invoice_id,\r\n                    range_date: fetchInput.range_date\r\n                })}>\r\n                    <Select.Option value='date'>วันที่</Select.Option>\r\n                    <Select.Option value='invoice'>หมายเลข Invoice</Select.Option>\r\n                </Select>\r\n            </div>\r\n            {fetchInput.selectType === 'date' ? <RangePicker style={{marginRight:15}} onChange={(date, dateString) => setFetchInput({\r\n                selectType: fetchInput.selectType,\r\n                invoice_id: fetchInput.invoice_id,\r\n                range_date: dateString\r\n            })} /> :\r\n                <Input style={{ width: 200,marginRight:15 }} value={fetchInput.invoice_id} onChange={e => setFetchInput({\r\n                    selectType: fetchInput.selectType,\r\n                    invoice_id: e.target.value.toUpperCase(),\r\n                    range_date: fetchInput.range_date\r\n                })} />\r\n            }\r\n            <Button style={{ marginRight: 10 }} type='primary' onClick={handleClick} >ค้นหา</Button>\r\n            <Button type='primary' danger onClick={handleReset} >RESET</Button>\r\n            {/* <InputSearch selectType={['date','invoice']} thaiwordSelect={['วันที่','หมายเลข Invoice']}  /> */}\r\n            <div style={{ display: 'inline-block', float: 'right', marginRight: 15 }}>\r\n                <Button type='primary' onClick={e => setModalVisible(true)}><PlusOutlined twoToneColor=\"#eb2f96\" /></Button>\r\n            </div>\r\n        </div>\r\n        <CustomModal modalTitle='รายการซื้อ' modalType=\"received-invoice\" modalForm={<ReceivedInvoiceForm column={receivedColumn} />} modalWidth={1400} modalVisible={modalVisible} getClose={handleClose} />\r\n        <Table\r\n            style={{ margin: '15px 15px' }}\r\n            rowKey={record => record._id}\r\n            bordered\r\n            columns={column}\r\n            dataSource={dataSource.data}\r\n            pagination={{\r\n                pageSize: 20\r\n            }}\r\n        />\r\n    </div>\r\n}","D:\\Work\\elemart-storage\\src\\api\\PaidApi.ts",["208"],"import {BACKEND_API} from '../config'\r\nimport axios from 'axios'\r\nexport class PaidApi {\r\n    static PAID_API_URL = `${BACKEND_API}/paid`\r\n    \r\n    static async getPaidInvoice(params:any) {\r\n        try {\r\n            const result = await axios.get(this.PAID_API_URL+'/findall', {\r\n              params,\r\n            });            \r\n            return result.data;\r\n          } catch {\r\n            alert('Cannot fetch data');\r\n            return [];\r\n          }\r\n    }\r\n\r\n    static async insertInvoice(data:object) {\r\n        const result = await axios.post(this.PAID_API_URL,data).then(response => {\r\n            return response;\r\n          });\r\n        return result.data;\r\n    }\r\n\r\n    static async getPaidInvoiceById(id:string){\r\n      try {\r\n        const result = await axios.get(this.PAID_API_URL+'/'+id);\r\n        return result.data;\r\n      } catch {\r\n        alert('Cannot fetch data');\r\n        return [];\r\n      }\r\n    }\r\n\r\n    static async updatePaidInvoiceById(id:string,data:object){\r\n      const result = await axios.put(this.PAID_API_URL+'/'+id,data).then(response => {\r\n        return response;\r\n      });\r\n    }\r\n\r\n    static async deleteInvoiceById(id:string){\r\n      await axios.delete(this.PAID_API_URL+'/'+id)\r\n    }\r\n}","D:\\Work\\elemart-storage\\src\\components\\PaidInvoiceForm\\PaidInvoiceForm.tsx",["209"],"D:\\Work\\elemart-storage\\src\\components\\EditTable\\EditableCell.tsx",["210"],"D:\\Work\\elemart-storage\\src\\components\\EditTable\\EditableTable.tsx",["211","212"],"D:\\Work\\elemart-storage\\src\\api\\ReceivedApi.ts",["213"],"import {BACKEND_API} from '../config'\r\nimport axios from 'axios'\r\nexport class ReceivedApi {\r\n    static RECEIVED_API_URL = `${BACKEND_API}/received`\r\n    \r\n    static async getReceivedInvoice(params:any) {\r\n        try {\r\n            const result = await axios.get(this.RECEIVED_API_URL+'/findall', {\r\n              params,\r\n            });            \r\n            return result.data;\r\n          } catch {\r\n            alert('Cannot fetch data');\r\n            return [];\r\n          }\r\n    }\r\n\r\n    static async getAllReceivedInvoice(params:any) {\r\n      try {\r\n          const result = await axios.get(this.RECEIVED_API_URL+'/findall',{\r\n            params\r\n          });\r\n          return result.data;\r\n        } catch {\r\n          alert('Cannot fetch data');\r\n          return [];\r\n        }\r\n    }\r\n    \r\n    static async insertReceivedInvoice(data:object) {\r\n        const result = await axios.post(this.RECEIVED_API_URL,data).then(response => {\r\n            return response;\r\n          });\r\n        return result.data;\r\n    }\r\n\r\n    static async getReceivedInvoiceById(id:string){\r\n      try {\r\n        const result = await axios.get(this.RECEIVED_API_URL+'/'+id);            \r\n        return result.data;\r\n      } catch {\r\n        alert('Cannot fetch data');\r\n        return [];\r\n      }\r\n    }\r\n\r\n    static async updateReceivedInvoiceById(id:string,data:object){\r\n      const result = await axios.put(this.RECEIVED_API_URL+'/'+id,data).then(response => {\r\n        return response;\r\n      });\r\n    }\r\n\r\n    static async deleteReceivedInvoiceById(id:string){\r\n      await axios.delete(this.RECEIVED_API_URL+'/'+id)\r\n    }\r\n}","D:\\Work\\elemart-storage\\src\\mocks\\ProductMocks.ts",[],"D:\\Work\\elemart-storage\\src\\api\\ProductApi.ts",[],"D:\\Work\\elemart-storage\\src\\components\\PaidInfo\\PaidInfo.tsx",["214"],"import { Table, Card, Descriptions, Switch, Button } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { PaidApi } from '../../api/PaidApi'\r\nimport { ProductApi } from '../../api/ProductApi'\r\nimport { paidColumn } from '../../mocks/ColumnMocks'\r\nimport { removeDuplicate } from '../../utils/removeDuplicate'\r\nimport { EditableTable } from '../EditTable/EditableTable'\r\nimport {useAuth} from '../Auth/auth-context'\r\nimport './style.css'\r\nimport { generateExcel } from '../Excel/ExcelComponent'\r\ninterface PaidProps {\r\n    createdDate: Date\r\n    customer_name: string\r\n    data_table: Array<Object>\r\n    invoice_date: string\r\n    invoice_id: string\r\n    updateDate: Date\r\n    updatedBy:string\r\n    _id: string\r\n}\r\nexport const PaidInfo: React.FC<{ match: any }> = ({ match }) => {\r\n    const { id } = match.params;\r\n    const [dataSource, setDataSource] = useState({} as PaidProps)\r\n    const [storeDataSource, setStoreDataSource] = useState([] as any)\r\n    const [currentUserID, setCurrentUserID] = useState('')\r\n    const [editable, setEditable] = useState(false)\r\n    const {myAccount} = useAuth()\r\n    useEffect(() => {\r\n        const localCustomerData = localStorage.getItem('customer')        \r\n        const getPaidFromId = async (id: string) => {\r\n            const res = await PaidApi.getPaidInvoiceById(id)\r\n            if(localCustomerData !== null){\r\n                const findCustomer = JSON.parse(localCustomerData).find((cusData:any)=>cusData._id === res[0].customer_name)\r\n                res[0].customer_name = findCustomer.customer_name\r\n                setDataSource(res[0])\r\n                setCurrentUserID(findCustomer._id)\r\n                setStoreDataSource(JSON.parse(JSON.stringify(res[0])))\r\n            }            \r\n        }\r\n        getPaidFromId(id)\r\n        return () => {\r\n\r\n        }\r\n    }, [id])\r\n\r\n    useEffect(() => {\r\n        async function fetchProduct() {\r\n            if(editable){\r\n                const response = await ProductApi.getAllProduct({\r\n                    limitPage:100\r\n                })\r\n                localStorage.setItem('product',JSON.stringify(response))\r\n            }\r\n        }\r\n        fetchProduct()\r\n        return () => {\r\n            console.log('unmount')\r\n        }\r\n    }, [editable])\r\n\r\n    const handleData = (data:Array<Object>) =>{\r\n        dataSource.data_table = data\r\n    }\r\n\r\n    const onUpdate = async() => {\r\n        const { id } = match.params;\r\n        const getProduct = localStorage.getItem('product')        \r\n        let key        \r\n        const cpMyAccount = JSON.parse(JSON.stringify(myAccount))\r\n        dataSource.updatedBy = cpMyAccount.me\r\n        dataSource.customer_name = currentUserID\r\n        await PaidApi.updatePaidInvoiceById(id,dataSource).then(res=>{\r\n            return res\r\n        })\r\n        if(getProduct !== null){\r\n            const p = JSON.parse(getProduct)\r\n            dataSource.data_table.map(async(data:any,index:number)=>{\r\n                const diff:any = {}\r\n                const getProduct = await ProductApi.getProductById(data.raw_id).then(res=>{\r\n                    return res\r\n                })\r\n                const filterData = getProduct[0]\r\n                // const filterData = p.filter((pFilter:any) => pFilter._id === data.raw_id)[0]\r\n                for(key in storeDataSource.data_table[index]){\r\n                    if(data.hasOwnProperty(key) && key !== 'operation'){ /// compare old and update data to keep object change\r\n                        if(data[key] !== storeDataSource.data_table[index][key]){                            \r\n                               Object.assign(diff,data)\r\n                        }\r\n                    }\r\n                }\r\n                let oldVal = storeDataSource.data_table.find((data:any)=>data.raw_id===diff.raw_id)\r\n                if(oldVal !== undefined){\r\n                    if(oldVal.paid_amount > diff.paid_amount) filterData.current_amount = filterData.current_amount + (oldVal.paid_amount - diff.paid_amount)                    \r\n                    if(oldVal.paid_amount < diff.paid_amount) filterData.current_amount -= diff.paid_amount       \r\n                }else{\r\n                    filterData.current_amount -= data.paid_amount\r\n                }\r\n                filterData.history_table.push(id)\r\n                filterData.history_table = removeDuplicate(filterData.history_table)\r\n                ProductApi.updateProductById(data.raw_id,filterData).then(res=>{\r\n                    window.location.reload()\r\n                })\r\n                \r\n            })\r\n        }\r\n    }\r\n\r\n    const summaryData = (pageData: any) => {\r\n        let summary = 0;\r\n          pageData.forEach((data: any) => {\r\n            summary += Number.parseFloat(data.total_price);\r\n          });\r\n          return (\r\n            <>\r\n              <Table.Summary.Row>\r\n                <Table.Summary.Cell index={0}></Table.Summary.Cell>\r\n                <Table.Summary.Cell index={1}>Total</Table.Summary.Cell>\r\n                <Table.Summary.Cell index={2}>-</Table.Summary.Cell>\r\n                <Table.Summary.Cell index={3}>-</Table.Summary.Cell>\r\n                <Table.Summary.Cell index={4}>{summary}</Table.Summary.Cell>\r\n                <Table.Summary.Cell index={5}></Table.Summary.Cell>\r\n              </Table.Summary.Row>\r\n            </>\r\n          );        \r\n      };\r\n\r\n    return <>\r\n        <div className='paid-content'>\r\n            <div className='switch-style'>\r\n                <Switch checkedChildren={'ยกเลิก'} unCheckedChildren={'แก้ไข'} onChange={(e)=>setEditable(e)} />\r\n            </div>\r\n            <div>\r\n                <Button\r\n                    type='primary'\r\n                    style={{backgroundColor:'#2ec500',borderRadius:'5px',marginBottom:15}}\r\n                    onClick={e =>\r\n                        generateExcel(paidColumn, dataSource.invoice_id,dataSource.data_table)\r\n                    }\r\n                >\r\n                Generate Excel\r\n                </Button>\r\n            </div>    \r\n            <Card>\r\n                <Descriptions title={`${dataSource.invoice_id}`} layout=\"vertical\" bordered>\r\n                    <Descriptions.Item label='วันที่'>{dataSource.invoice_date}</Descriptions.Item>\r\n                    <Descriptions.Item label='ลูกค้า'>{dataSource.customer_name}</Descriptions.Item>\r\n                </Descriptions>\r\n                <div className='paid-form editable-table'>\r\n                    {editable\r\n                    ?\r\n                    ( \r\n                        <>\r\n                        <EditableTable column={paidColumn} getData={handleData} oldData={dataSource.data_table} updateData={true} ablePagination={\r\n                            {hideOnSinglePage:true,\r\n                            pageSize:100}}\r\n                            startCount={dataSource.data_table.length+1}\r\n                            \r\n                         />\r\n                        <Button type='primary' style={{marginTop:15}} onClick={onUpdate} >Update</Button>\r\n                        </>\r\n                    )\r\n                    :\r\n                    (\r\n                        <Table \r\n                            columns={paidColumn} \r\n                            dataSource={dataSource.data_table} \r\n                            bordered\r\n                            pagination={false}\r\n                            summary={tableData=>summaryData(tableData)}\r\n                            />\r\n                    )}\r\n                </div>\r\n            </Card>\r\n        </div>\r\n    </>\r\n}","D:\\Work\\elemart-storage\\src\\mocks\\ColumnMocks.ts",[],"D:\\Work\\elemart-storage\\src\\components\\ReceivedInfo\\ReceivedInfo.tsx",["215"],"import { Table, Card, Descriptions, Button, Switch } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { PaidApi } from '../../api/PaidApi'\r\nimport { ProductApi } from '../../api/ProductApi'\r\nimport { ReceivedApi } from '../../api/ReceivedApi'\r\nimport { receivedColumn } from '../../mocks/ColumnMocks'\r\nimport { removeDuplicate } from '../../utils/removeDuplicate'\r\nimport { EditableTable } from '../EditTable/EditableTable'\r\nimport {useAuth} from '../Auth/auth-context'\r\nimport './style.css'\r\nimport { generateExcel } from '../Excel/ExcelComponent'\r\ninterface ReceivedProps {\r\n    createdDate: Date\r\n    seller: string\r\n    data_table: Array<Object>\r\n    invoice_date: string\r\n    invoice_id: string\r\n    updateDate: Date\r\n    received_description?: string\r\n    updatedBy:string\r\n    _id: string\r\n}\r\nexport const ReceivedInfo: React.FC<{ match: any }> = ({ match }) => {\r\n    const { id } = match.params;\r\n    const [dataSource, setDataSource] = useState({} as ReceivedProps)\r\n    const [storeDataSource, setStoreDataSource] = useState([] as any)\r\n    const [currentUserID, setCurrentUserID] = useState('')\r\n    const [editable, setEditable] = useState(false)\r\n    const {myAccount} = useAuth()\r\n    \r\n    useEffect(() => {\r\n        const localCustomerData = localStorage.getItem('customer')\r\n        const getPaidFromId = async (id: string) => {\r\n            const res = await ReceivedApi.getReceivedInvoiceById(id)\r\n            if(localCustomerData !== null){\r\n                const findCustomer = JSON.parse(localCustomerData).find((cusData:any)=>cusData._id === res[0].seller)\r\n                res[0].seller = findCustomer.customer_name\r\n                setDataSource(res[0])\r\n                setCurrentUserID(findCustomer._id)\r\n                setStoreDataSource(JSON.parse(JSON.stringify(res[0])))\r\n            }\r\n        }\r\n        getPaidFromId(id)\r\n        return () => {\r\n\r\n        }\r\n    }, [id])\r\n\r\n    useEffect(() => {\r\n        async function fetchProduct() {\r\n            if(editable){\r\n                const response = await ProductApi.getAllProduct({\r\n                    limitPage:100\r\n                })\r\n                localStorage.setItem('product',JSON.stringify(response))\r\n            }\r\n        }\r\n        fetchProduct()\r\n        return () => {\r\n            console.log('unmount')\r\n        }\r\n    }, [editable])\r\n\r\n    const handleData = (data:Array<Object>) =>{\r\n        dataSource.data_table = data\r\n    }\r\n\r\n    const onUpdate = async() => {\r\n        const { id } = match.params;\r\n        const getProduct = localStorage.getItem('product')        \r\n        let key\r\n        const cpMyAccount = JSON.parse(JSON.stringify(myAccount))\r\n        dataSource.updatedBy = cpMyAccount.me\r\n        dataSource.seller = currentUserID\r\n        await ReceivedApi.updateReceivedInvoiceById(id,dataSource).then(res=>{\r\n            return res\r\n        })\r\n\r\n        if(getProduct !== null){\r\n            dataSource.data_table.map(async(data:any,index:number)=>{\r\n                const diff:any = {}\r\n                const getProduct = await ProductApi.getProductById(data.raw_id).then(res=>{\r\n                    return res\r\n                })\r\n                const filterData = getProduct[0]\r\n                for(key in storeDataSource.data_table[index]){\r\n                    if(data.hasOwnProperty(key) && key !== 'operation'){ /// compare old and update data to keep object change\r\n                        if(data[key] !== storeDataSource.data_table[index][key]){                            \r\n                               Object.assign(diff,data)\r\n                        }\r\n                    }\r\n                }\r\n                let oldVal = storeDataSource.data_table.find((data:any)=>data.raw_id===diff.raw_id)\r\n                if(oldVal !== undefined){\r\n                    if(diff.received_amount > oldVal.received_amount  ) filterData.current_amount = filterData.current_amount + (diff.received_amount - oldVal.received_amount)                    \r\n                    if(diff.received_amount < oldVal.received_amount  ) filterData.current_amount -= diff.received_amount       \r\n                }else{\r\n                    filterData.current_amount += data.received_amount\r\n                }\r\n                filterData.history_table.push(id)\r\n                filterData.history_table = removeDuplicate(filterData.history_table)\r\n                ProductApi.updateProductById(data.raw_id,filterData).then(res=>{\r\n                    window.location.reload()\r\n                })\r\n                \r\n            })\r\n        }\r\n    }\r\n\r\n    return <>\r\n        <div className='paid-content'>\r\n        <div className='switch-style'>\r\n                <Switch checkedChildren={'ยกเลิก'} unCheckedChildren={'แก้ไข'} onChange={(e)=>setEditable(e)} />\r\n            </div>\r\n            <div>\r\n                <Button\r\n                    type='primary'\r\n                    style={{backgroundColor:'#2ec500',borderRadius:'5px',marginBottom:15}}\r\n                    onClick={e =>\r\n                        generateExcel(receivedColumn, dataSource.invoice_id,dataSource.data_table)\r\n                    }\r\n                >\r\n                Generate Excel\r\n                </Button>\r\n            </div> \r\n            <Card>\r\n                <Descriptions title={`${dataSource.invoice_id}`} layout=\"vertical\" bordered>\r\n                    <Descriptions.Item label='วันที่' span={2}>{dataSource.invoice_date}</Descriptions.Item>\r\n                    <Descriptions.Item label='ลูกค้า' span={2}>{dataSource.seller}</Descriptions.Item>\r\n                    <Descriptions.Item span={3} label='รายละเอียด' >{dataSource.received_description}</Descriptions.Item>\r\n                </Descriptions>\r\n                <div className='paid-form editable-table'>\r\n                {editable\r\n                    ?\r\n                    ( \r\n                        <>\r\n                        <EditableTable column={receivedColumn} getData={handleData} oldData={dataSource.data_table} updateData={true} ablePagination={\r\n                            {hideOnSinglePage:true,\r\n                            pageSize:100}}\r\n                            startCount={dataSource.data_table.length+1}\r\n                            \r\n                         />\r\n                        <Button type='primary' style={{marginTop:15}} onClick={onUpdate} >Update</Button>\r\n                        </>\r\n                    )\r\n                    :\r\n                    (<Table columns={receivedColumn} dataSource={dataSource.data_table} bordered pagination={false} />)\r\n                }\r\n                </div>\r\n            </Card>\r\n        </div>\r\n    </>\r\n}","D:\\Work\\elemart-storage\\src\\components\\ReceivedInvoiceForm\\ReceivedInvoiceForm.tsx",["216","217"],"\r\nimport { Button, DatePicker, Input, Select } from 'antd'\r\nimport Cookies from 'js-cookie'\r\nimport { useEffect, useState } from 'react'\r\nimport { CustomerApi } from '../../api/CustomerApi'\r\nimport { PaidApi } from '../../api/PaidApi'\r\nimport { ProductApi } from '../../api/ProductApi'\r\nimport { ReceivedApi } from '../../api/ReceivedApi'\r\nimport { EditableTable } from '../EditTable/EditableTable'\r\n\r\ninterface TableProps {\r\n    column: Array<Object>\r\n}\r\n\r\nconst { TextArea } = Input;\r\n\r\nexport const ReceivedInvoiceForm: React.FC<TableProps> = props => {\r\n    const [dataTable, setdataTable] = useState([] as Array<Object>)\r\n    const [invoice, setInvoice] = useState('')\r\n    const [receivedDescription, setReceivedDescription] = useState('')\r\n    const [seller, setSeller] = useState('')\r\n    const [customers, setCustomers] = useState([] as Array<Object>)\r\n    const [dateData, setDateData] = useState('')\r\n\r\n    useEffect(() => {\r\n        async function fetchAllCustomer() {\r\n            const response = await CustomerApi.getAllCustomer()\r\n            setCustomers(response)\r\n        }\r\n        fetchAllCustomer()\r\n        return () => {\r\n            console.log('unmount')\r\n        }\r\n    }, [])\r\n\r\n    const getTableData = (data: Array<Object>) => {\r\n        setdataTable(data)\r\n    }\r\n\r\n    const onSave = async () => {\r\n        const getProduct = localStorage.getItem('product')\r\n        const getUserCookie = Cookies.get('profile')\r\n        if (getUserCookie !== undefined) {\r\n            const getUser = JSON.parse(getUserCookie)\r\n            const allData = {\r\n                invoice_date: dateData,\r\n                invoice_id: 'AP' + invoice,\r\n                seller: seller,\r\n                data_table: dataTable,\r\n                received_description: receivedDescription,\r\n                createdBy: getUser.fullname\r\n            }\r\n            const id = await ReceivedApi.insertReceivedInvoice(allData).then(res => {\r\n                return res._id\r\n            })\r\n            if (getProduct !== null) {\r\n                const p = JSON.parse(getProduct)\r\n                dataTable.map((data: any, index: number) => {\r\n                    const filterData = p.filter((pFilter: any) => pFilter._id === data.raw_id)[0]\r\n                    if (filterData !== undefined) {\r\n                        filterData.current_amount += data.received_amount\r\n                        filterData.history_table.push(id)\r\n    \r\n                        ProductApi.updateProductById(data.raw_id, filterData).then(res => {\r\n                            window.location.reload()\r\n                        })\r\n                    } else {\r\n                        alert('กรุณาเลือกสินค้า')\r\n                    }\r\n    \r\n                })\r\n            }\r\n        }\r\n        \r\n\r\n    }\r\n\r\n    return (\r\n        <div className='paid-content'>\r\n            <div className='paid-form date-form'>\r\n                <span>วันที่</span>\r\n                <div>\r\n                    <DatePicker format='DD/MM/YYYY' className={'input-width'} onChange={(date, dateString) => setDateData(dateString)} />\r\n                </div>\r\n            </div>\r\n            <div className='paid-form invoice-form'>\r\n                <span>หมายเลข Invoice</span>\r\n                <div>\r\n                    <Input addonBefore='AP' className={'input-width'} onChange={e => setInvoice(e.target.value)} />\r\n                </div>\r\n            </div>\r\n            <div className='paid-form customer-form'>\r\n                <span>ผู้ขาย</span>\r\n                <div>\r\n                    <Select className={'input-width'} onChange={e => setSeller(e.toString())}>\r\n                        {customers.map((data: any) => {\r\n                            return <Select.Option key={data._id} value={data._id}>{data.customer_name}</Select.Option>\r\n                        })}\r\n                    </Select>\r\n                </div>\r\n            </div>\r\n            <span>รายละเอียด</span>\r\n            <div>\r\n                <TextArea onChange={e => setReceivedDescription(e.target.value)} />\r\n            </div>\r\n            <div className='paid-form editable-table'>\r\n                <EditableTable column={props.column} getData={getTableData} oldData={[]} ablePagination={{ disabled: false }} startCount={1} />\r\n            </div>\r\n            <div >\r\n                <Button type='primary' onClick={onSave}>บันทึก</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","D:\\Work\\elemart-storage\\src\\components\\ProductInfo\\ProductInfo.tsx",["218","219","220","221","222"],"D:\\Work\\elemart-storage\\src\\components\\ProductForm\\ProductForm.tsx",["223","224","225","226","227","228","229","230"],"\r\nimport { Button, DatePicker, Input, InputNumber, Select } from 'antd'\r\nimport { useEffect, useState } from 'react'\r\nimport { CustomerApi } from '../../api/CustomerApi'\r\nimport { PaidApi } from '../../api/PaidApi'\r\nimport { ProductApi } from '../../api/ProductApi'\r\nimport { useAuth, AuthContext, AuthProps } from '../Auth/auth-context'\r\nimport { EditableTable } from '../EditTable/EditableTable'\r\n\r\nexport const ProductForm: React.FC = props => {\r\n    const au = useAuth()\r\n    const [product, setProduct] = useState('')\r\n    const [productId, setProductId] = useState('')\r\n    const [productAmount, setProductAmount] = useState(0)\r\n    const [dupeProductID, setDupeProductID] = useState('')\r\n    const onSave = async () => {\r\n        const cpUser = JSON.parse(JSON.stringify(au))\r\n        const allData = {\r\n            product_name: product,\r\n            product_id: productId.trim(),\r\n            current_amount: productAmount,\r\n            createdBy: cpUser.myAccount.me._id,\r\n            history_table: [],\r\n        }\r\n        ProductApi.insertProduct(allData).then(res => {\r\n            if (res.data === \"รหัสสินค้าซ้ำ\") {\r\n                setDupeProductID(res.data)\r\n            } else {\r\n                window.location.reload()\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    return (\r\n        <div className='paid-content'>\r\n            <div className='paid-form invoice-form'>\r\n                <span>รหัสสินค้า</span>\r\n                <div>\r\n                    <Input className={'input-width'} onChange={e => setProductId(e.target.value)} />\r\n                </div>\r\n            </div>\r\n            <div className='paid-form product-form'>\r\n                <span>ชื่อสินค้า</span>\r\n                <div>\r\n                    <Input className={'input-width'} onChange={e => setProduct(e.target.value)} />\r\n                </div>\r\n            </div>\r\n            <div className='paid-form product-form'>\r\n                <span>จำนวน</span>\r\n                <div>\r\n                    <InputNumber min={0} className={'input-width'} onChange={(e: any) => setProductAmount(e)} />\r\n                </div>\r\n            </div>\r\n            <div style={{textAlign:'center'}}>\r\n                <Button type='primary' onClick={onSave} style={{width:150}}>บันทึก</Button>\r\n            </div>\r\n                <div style={{color:'red',marginTop:15,textAlign:'center'}}>{dupeProductID}</div>\r\n        </div>\r\n    )\r\n}","D:\\Work\\elemart-storage\\src\\components\\Auth\\auth-context.tsx",["231","232","233","234","235"],"import React, { Children, useEffect, useReducer, useState } from 'react'\r\nimport Cookie from 'js-cookie'\r\nimport { UserApi } from '../../api/UserApi'\r\nexport interface AuthProps {\r\n    signIn:Function;\r\n    signOut:Function;\r\n    myAccount:Object;\r\n    setMyAccount:Function;\r\n}\r\n\r\nexport const AuthContext = React.createContext<AuthProps>({\r\n    signIn: () => null,\r\n    signOut: () => null,\r\n    myAccount: {\r\n        me:'',\r\n        login:false\r\n    },\r\n    setMyAccount:() =>null\r\n})\r\n\r\nexport const useAuth = () => React.useContext(AuthContext)\r\n\r\nexport const AuthProvider = ({ children }:any) => {\r\n    \r\n    const [checkLogin,setLogin] = useState(false)\r\n    const [userData,setUserData] = useState('')\r\n    const [myAccount,setMyAccount] = useState({\r\n        me:'',\r\n        login:false\r\n    })\r\n\r\n    useEffect(()=>{\r\n        const checkCookie = Cookie.get('profile')\r\n        if(checkCookie!== undefined){\r\n            const profile = JSON.parse(checkCookie)\r\n            setMyAccount({\r\n                me:profile.username,\r\n                login:true\r\n            })\r\n        }else{\r\n            setMyAccount({\r\n                me:'',\r\n                login:false\r\n            })\r\n        }\r\n    },[])\r\n\r\n    const signIn = async (data:any) => {\r\n        setLogin(true)\r\n        const result = await UserApi.Login(data).then(res=>{\r\n            return res\r\n        })\r\n        if(result.msg === 'username or password wrong'){\r\n            return result.msg\r\n        }else{\r\n            Cookie.set('profile',JSON.stringify(result.user))\r\n            setMyAccount({\r\n                me:result.user,\r\n                login:true\r\n            })\r\n            return result.user\r\n        }\r\n    }\r\n    const signOut = () => {            \r\n        Cookie.remove('profile')\r\n        return 'sign out'\r\n    }\r\n    return (\r\n        <AuthContext.Provider value={{myAccount,setMyAccount,signIn,signOut}}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    )\r\n}","D:\\Work\\elemart-storage\\src\\utils\\removeDuplicate.tsx",[],"D:\\Work\\elemart-storage\\src\\components\\CustomerInfo\\CustomerInfo.tsx",["236","237","238","239","240","241","242","243","244","245","246","247"],"import { Table, Card, Descriptions, Switch, Button } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { CustomerApi } from '../../api/CustomerApi'\r\nimport { PaidApi } from '../../api/PaidApi'\r\nimport { ProductApi } from '../../api/ProductApi'\r\nimport { ReceivedApi } from '../../api/ReceivedApi'\r\nimport { mergeAllInvoice, paidColumn, productDetailColumn } from '../../mocks/ColumnMocks'\r\nimport {generateExcel} from '../Excel/ExcelComponent'\r\nimport './style.css'\r\ninterface PaidProps {\r\n    createdDate: Date\r\n    customer_name: string\r\n    data_table: Array<Object>\r\n    invoice_date: string\r\n    invoice_id: string\r\n    updateDate: Date\r\n    _id: string\r\n}\r\nexport const CustomerInfo: React.FC<{ match: any }> = ({ match }) => {\r\n    const { id } = match.params;\r\n    const [dataSource, setDataSource] = useState({} as PaidProps)\r\n    const [customerName, setCustomerName] = useState('')\r\n    const [storeDataSource, setStoreDataSource] = useState([] as any)\r\n    const [editable, setEditable] = useState(false)\r\n    useEffect(() => {\r\n        const localCustomerData = localStorage.getItem('customer')\r\n        if(localCustomerData !== null){\r\n            const findCustomer = JSON.parse(localCustomerData).find((cusData:any)=>cusData._id === id)\r\n            setCustomerName(findCustomer.customer_name)\r\n        }\r\n\r\n        const getCustomerInvoice = async (id: string) => {\r\n            const storeData: any = []\r\n            let count = 0\r\n            const receivedInvoice = await ReceivedApi.getAllReceivedInvoice({\r\n                filterObject: {\r\n                    seller: id\r\n                }\r\n            })\r\n\r\n            const paidInvoice = await PaidApi.getPaidInvoice({\r\n                filterObject: {\r\n                    customer_name: id\r\n                }\r\n            })\r\n            receivedInvoice.data.map((ivData: any) => {\r\n                ivData.data_table.map((dataTable: any) => {\r\n                    Object.assign(dataTable, {_id:ivData._id, invoice_date: ivData.invoice_date, invoice_id: ivData.invoice_id, invoice_type: 'รับ', key: count })\r\n                    storeData.push(dataTable)\r\n                    count++\r\n                })\r\n            })\r\n\r\n            paidInvoice.data.map((ivData: any) => {\r\n                ivData.data_table.map((dataTable: any) => {\r\n                    Object.assign(dataTable, {_id:ivData._id, invoice_date: ivData.invoice_date, invoice_id: ivData.invoice_id, invoice_type: 'ขาย', key: count })\r\n                    storeData.push(dataTable)\r\n                    count++\r\n                })\r\n            })\r\n            \r\n            setDataSource({\r\n                ...dataSource,\r\n                data_table: storeData\r\n            })\r\n        }\r\n        getCustomerInvoice(id)\r\n        return () => {\r\n\r\n        }\r\n    }, [id])\r\n\r\n    useEffect(() => {\r\n        async function fetchProduct() {\r\n            if (editable) {\r\n                const response = await ProductApi.getAllProduct({\r\n                    limitPage: 100\r\n                })\r\n                localStorage.setItem('product', JSON.stringify(response))\r\n            }\r\n        }\r\n        fetchProduct()\r\n        return () => {\r\n        }\r\n    }, [editable])\r\n\r\n    const summaryData = (pageData: any) => {\r\n        let summary = 0;\r\n        pageData.forEach((data: any) => {\r\n            summary += Number.parseFloat(data.total_price);\r\n        });\r\n        return (\r\n            <>\r\n                <Table.Summary.Row>\r\n                    <Table.Summary.Cell index={0}></Table.Summary.Cell>\r\n                    <Table.Summary.Cell index={1}></Table.Summary.Cell>\r\n                    <Table.Summary.Cell index={2}></Table.Summary.Cell>\r\n                    <Table.Summary.Cell index={3}></Table.Summary.Cell>\r\n                    <Table.Summary.Cell index={4}></Table.Summary.Cell>\r\n                    <Table.Summary.Cell index={5}></Table.Summary.Cell>\r\n                    <Table.Summary.Cell index={6}></Table.Summary.Cell>\r\n                    <Table.Summary.Cell index={7}></Table.Summary.Cell>\r\n                    <Table.Summary.Cell index={8}>Total : {summary}</Table.Summary.Cell>\r\n                </Table.Summary.Row>\r\n            </>\r\n        );\r\n    };\r\n    return <>\r\n        <div className='paid-content'>\r\n            <div>\r\n                <Button\r\n                    type='primary'\r\n                    style={{backgroundColor:'#2ec500',borderRadius:'5px',marginBottom:15}}\r\n                    onClick={e =>\r\n                        generateExcel(mergeAllInvoice, customerName,dataSource.data_table)\r\n                    }\r\n                >\r\n                Generate Excel\r\n                </Button>\r\n            </div>            \r\n            <Card>\r\n                <div className='paid-form editable-table'>\r\n                    <Descriptions title={`ลูกค้า ${customerName}`}></Descriptions>\r\n                    <Table\r\n                        columns={mergeAllInvoice}\r\n                        dataSource={dataSource.data_table}\r\n                        bordered\r\n                        pagination={false}\r\n                        summary={tableData => summaryData(tableData)}\r\n                    />\r\n                </div>\r\n            </Card>\r\n        </div>\r\n    </>\r\n}","D:\\Work\\elemart-storage\\src\\components\\Excel\\ExcelComponent.tsx",["248"],"import * as Excel from 'exceljs';\r\nimport { saveAs } from 'file-saver';\r\n\r\nconst createHeader = (keys: any) => {\r\n  const result: any[] = [];\r\n  keys.map((keyData: any) => {\r\n    if (keyData.children) {\r\n      keyData.children.map((childData: any) => {\r\n        result.push({\r\n          key: childData.dataIndex,\r\n          width: 20,\r\n        });\r\n      });\r\n    } else {\r\n      if (keyData.dataIndex !== 'operation') {\r\n        result.push({\r\n          key: keyData.dataIndex,\r\n          width: 20,\r\n        });\r\n      }\r\n    }\r\n    return keyData;\r\n  });\r\n  return result;\r\n};\r\nconst createThaiHeader = (keys: any) => {\r\n  const result: any[] = [];\r\n  const Obj = {};\r\n  keys.map((keyData: any) => {\r\n    const Obj2 = {};\r\n    if (keyData.children) {\r\n      Object.assign(Obj, { [keyData.dataIndex]: keyData.title });\r\n      keyData.children.map((childData: any) => {\r\n        Object.assign(Obj, { [childData.dataIndex]: childData.title });\r\n        Object.assign(Obj2, { [childData.dataIndex]: childData.title });\r\n        return childData;\r\n      });\r\n      Object.assign(Obj, {\r\n        [keyData.dataIndex]: {\r\n          [keyData.children[0].dataIndex]: keyData.title,\r\n          children: Obj2,\r\n        },\r\n      });\r\n    } else {\r\n      Object.assign(Obj, { [keyData.dataIndex]: keyData.title });\r\n    }\r\n    return keyData;\r\n  });\r\n  result.push(Obj);\r\n  return result;\r\n};\r\nconst createSubheader = (\r\n  ws: Excel.Worksheet,\r\n  headers: object[],\r\n  CellName: string[]\r\n) => {\r\n  const storeChildren: any[] = [];\r\n  const storeSubChildren: any[] = [];\r\n  const storeChildrenLength: number[] = [];\r\n  const storeKeyInTable: any[] = [];\r\n  const headerData: any = {};\r\n\r\n  headers.map((da: any) => {\r\n    const headerKeys = Object.keys(da);\r\n    headerKeys.map(k => {\r\n      if (da[k].children) {\r\n        const childKey = Object.keys(da[k])[0];\r\n        storeChildren.push({ [childKey]: da[k][childKey] });\r\n        storeSubChildren.push(da[k].children);\r\n        storeChildrenLength.push(Object.keys(da[k].children).length);\r\n      }\r\n      return k;\r\n    });\r\n    return da;\r\n  });\r\n\r\n  const startKeyBeforeMerge = storeChildren.map(s => {\r\n    // merge cell จากหัวข้อเริ่มต้น\r\n    const childKey = Object.keys(s)[0];\r\n    const childVal = Object.values(s)[0];\r\n    Object.assign(headerData, { [childKey]: childVal });\r\n    return childKey;\r\n  });\r\n\r\n  storeSubChildren.map(s => {\r\n    const childKey = Object.keys(s);\r\n    childKey.map((key: any) => {\r\n      storeKeyInTable.push(key);\r\n      return key;\r\n    });\r\n    return childKey;\r\n  });\r\n\r\n  CellName.map((name: any, index: number) => {\r\n    ws.mergeCells(name + ':' + name.slice(0, name.length - 1) + '6');\r\n    return name;\r\n  });\r\n\r\n  storeKeyInTable.map(key => {\r\n    // move value to row 6\r\n    const idCol = ws.getColumn(key);\r\n    if (idCol.number !== undefined) {\r\n      const colAddress = ws.getRow(5).getCell(idCol.number).address;\r\n      ws.unMergeCells(colAddress);\r\n      CellName.map((name: any) => {\r\n        ws.getCell(name.slice(0, name.length - 1) + '6').value = ws.getCell(\r\n          name\r\n        ).value;\r\n        return name;\r\n      });\r\n    }\r\n    return key;\r\n  });\r\n\r\n  startKeyBeforeMerge.map((startKey: any, index: number) => {\r\n    // merge cell of header\r\n    const idCol = ws.getColumn(startKey);\r\n    if (idCol.number !== undefined) {\r\n      const colAddress = ws.getRow(5).getCell(idCol.number).address;\r\n      const startCol = Number.parseInt(\r\n        ws.getRow(5).getCell(idCol.number).col,\r\n        10\r\n      );\r\n      const endCol =\r\n        Number.parseInt(ws.getRow(5).getCell(idCol.number).col, 10) +\r\n        storeChildrenLength[index] -\r\n        1;\r\n      ws.getCell(colAddress).value = headerData[startKey];\r\n      ws.mergeCells(5, startCol, 5, endCol);\r\n    }\r\n    return startKey;\r\n  });\r\n  return ws;\r\n};\r\nconst handleFilename = (name: string) => {\r\n  return name.replace(/['/']/g, '-');\r\n};\r\nexport const generateExcel = async (column: any, name: string, data: any) => {\r\n  const filename = handleFilename(name);\r\n  const headers = createHeader(column);\r\n  const thaiHeaders = createThaiHeader(column);\r\n  const storeCellName: string[] = [];\r\n  const blobType =\r\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n  const workbook = new Excel.Workbook();\r\n  const ws = workbook.addWorksheet(filename, {\r\n    pageSetup: { fitToPage: true, orientation: 'landscape', paperSize: 9 },\r\n  });\r\n  const lastColumnGreater26 = ws.getCell(1, headers.length).address.slice(0, 2);\r\n  const lastColumnLess26 = ws.getCell(1, headers.length).address.slice(0, 1);\r\n  if (headers.length <= 26) {\r\n    ws.mergeCells('A1:' + lastColumnLess26 + '2');\r\n  } else {\r\n    ws.mergeCells('A1:' + lastColumnGreater26 + '2');\r\n  }\r\n  ws.getCell('A1').value = name;\r\n  ws.columns = headers;\r\n  ws.addRow([]);\r\n  ws.addRow([]);\r\n  ws.addRows(thaiHeaders);\r\n  ws.eachRow(row => {\r\n    row.eachCell(cell => {\r\n      if (cell.address.slice(-1) === '5') {\r\n        storeCellName.push(cell.address);\r\n      }\r\n    });\r\n  });\r\n\r\n  const updateSubheaderWs = createSubheader(ws, thaiHeaders, storeCellName);\r\n\r\n  updateSubheaderWs.addRows(data);\r\n  updateSubheaderWs.eachRow(row => {\r\n    row.eachCell(cell => {\r\n      cell.alignment = {\r\n        horizontal: 'center',\r\n        vertical: 'middle',\r\n      };\r\n      cell.border = {\r\n        top: { style: 'medium' },\r\n        left: { style: 'medium' },\r\n        bottom: { style: 'medium' },\r\n        right: { style: 'medium' },\r\n      };\r\n    });\r\n  });\r\n\r\n  updateSubheaderWs.getCell('A1').border = {\r\n    top: { style: undefined },\r\n    left: { style: undefined },\r\n    bottom: { style: undefined },\r\n    right: { style: undefined },\r\n  };\r\n  updateSubheaderWs.getCell('A1').font = {\r\n    size: 14,\r\n    bold: true,\r\n  };\r\n  await workbook.xlsx.writeBuffer().then(data => {\r\n    const blob = new Blob([data], { type: blobType });\r\n    saveAs(blob, filename + '.xlsx');\r\n  });\r\n};\r\n","D:\\Work\\elemart-storage\\src\\components\\RouteComponent\\PrivateRoute.tsx",[],"D:\\Work\\elemart-storage\\src\\components\\RouteComponent\\PublicRoute.tsx",[],"D:\\Work\\elemart-storage\\src\\components\\LogoutComponent\\LogoutComponent.tsx",["249"],"import React,{useEffect} from 'react'\r\nimport {useAuth} from '../Auth/auth-context'\r\n\r\nexport const LogoutComponent:React.FC = () => {\r\n    const {signOut,setMyAccount} = useAuth()\r\n    useEffect(()=>{\r\n        setMyAccount({\r\n            me:'',\r\n            login:false\r\n        })\r\n    },[])\r\n    return  signOut()\r\n}","D:\\Work\\elemart-storage\\src\\api\\UserApi.ts",[],"D:\\Work\\elemart-storage\\src\\components\\FilterTables\\FilterTables.tsx",["250","251"],"D:\\Work\\elemart-storage\\src\\components\\SearchBar\\InputSearch.tsx",["252"],{"ruleId":"253","replacedBy":"254"},{"ruleId":"255","replacedBy":"256"},{"ruleId":"257","severity":1,"message":"258","line":12,"column":25,"nodeType":"259","messageId":"260","endLine":12,"endColumn":31},{"ruleId":"257","severity":1,"message":"261","line":2,"column":10,"nodeType":"259","messageId":"260","endLine":2,"endColumn":13},{"ruleId":"257","severity":1,"message":"262","line":3,"column":10,"nodeType":"259","messageId":"260","endLine":3,"endColumn":19},{"ruleId":"257","severity":1,"message":"263","line":12,"column":8,"nodeType":"259","messageId":"260","endLine":12,"endColumn":14},{"ruleId":"257","severity":1,"message":"264","line":1,"column":17,"nodeType":"259","messageId":"260","endLine":1,"endColumn":26},{"ruleId":"257","severity":1,"message":"265","line":6,"column":11,"nodeType":"259","messageId":"260","endLine":6,"endColumn":25},{"ruleId":"257","severity":1,"message":"266","line":12,"column":19,"nodeType":"259","messageId":"260","endLine":12,"endColumn":28},{"ruleId":"257","severity":1,"message":"264","line":1,"column":27,"nodeType":"259","messageId":"260","endLine":1,"endColumn":36},{"ruleId":"257","severity":1,"message":"267","line":2,"column":37,"nodeType":"259","messageId":"260","endLine":2,"endColumn":43},{"ruleId":"257","severity":1,"message":"268","line":4,"column":10,"nodeType":"259","messageId":"260","endLine":4,"endColumn":23},{"ruleId":"257","severity":1,"message":"269","line":8,"column":10,"nodeType":"259","messageId":"260","endLine":8,"endColumn":22},{"ruleId":"257","severity":1,"message":"270","line":9,"column":10,"nodeType":"259","messageId":"260","endLine":9,"endColumn":19},{"ruleId":"257","severity":1,"message":"258","line":11,"column":9,"nodeType":"259","messageId":"260","endLine":11,"endColumn":15},{"ruleId":"271","severity":1,"message":"272","line":84,"column":8,"nodeType":"273","endLine":84,"endColumn":10,"suggestions":"274"},{"ruleId":"257","severity":1,"message":"275","line":93,"column":23,"nodeType":"259","messageId":"260","endLine":93,"endColumn":29},{"ruleId":"271","severity":1,"message":"276","line":108,"column":8,"nodeType":"273","endLine":108,"endColumn":31,"suggestions":"277"},{"ruleId":"257","severity":1,"message":"264","line":1,"column":21,"nodeType":"259","messageId":"260","endLine":1,"endColumn":30},{"ruleId":"257","severity":1,"message":"278","line":1,"column":31,"nodeType":"259","messageId":"260","endLine":1,"endColumn":39},{"ruleId":"257","severity":1,"message":"279","line":3,"column":9,"nodeType":"259","messageId":"260","endLine":3,"endColumn":21},{"ruleId":"257","severity":1,"message":"264","line":1,"column":18,"nodeType":"259","messageId":"260","endLine":1,"endColumn":27},{"ruleId":"257","severity":1,"message":"258","line":12,"column":9,"nodeType":"259","messageId":"260","endLine":12,"endColumn":15},{"ruleId":"280","severity":1,"message":"281","line":33,"column":35,"nodeType":"282","messageId":"283","endLine":33,"endColumn":37},{"ruleId":"257","severity":1,"message":"284","line":4,"column":17,"nodeType":"259","messageId":"260","endLine":4,"endColumn":27},{"ruleId":"257","severity":1,"message":"285","line":5,"column":10,"nodeType":"259","messageId":"260","endLine":5,"endColumn":17},{"ruleId":"257","severity":1,"message":"286","line":7,"column":10,"nodeType":"259","messageId":"260","endLine":7,"endColumn":25},{"ruleId":"257","severity":1,"message":"287","line":13,"column":10,"nodeType":"259","messageId":"260","endLine":13,"endColumn":22},{"ruleId":"257","severity":1,"message":"288","line":14,"column":10,"nodeType":"259","messageId":"260","endLine":14,"endColumn":21},{"ruleId":"280","severity":1,"message":"281","line":34,"column":35,"nodeType":"282","messageId":"283","endLine":34,"endColumn":37},{"ruleId":"257","severity":1,"message":"289","line":92,"column":13,"nodeType":"259","messageId":"260","endLine":92,"endColumn":19},{"ruleId":"257","severity":1,"message":"266","line":92,"column":21,"nodeType":"259","messageId":"260","endLine":92,"endColumn":30},{"ruleId":"280","severity":1,"message":"281","line":102,"column":47,"nodeType":"282","messageId":"283","endLine":102,"endColumn":49},{"ruleId":"257","severity":1,"message":"275","line":36,"column":13,"nodeType":"259","messageId":"260","endLine":36,"endColumn":19},{"ruleId":"280","severity":1,"message":"281","line":55,"column":54,"nodeType":"282","messageId":"283","endLine":55,"endColumn":56},{"ruleId":"271","severity":1,"message":"290","line":63,"column":6,"nodeType":"273","endLine":63,"endColumn":15,"suggestions":"291"},{"ruleId":"271","severity":1,"message":"292","line":30,"column":8,"nodeType":"273","endLine":30,"endColumn":21,"suggestions":"293"},{"ruleId":"294","severity":1,"message":"295","line":38,"column":17,"nodeType":"296","endLine":38,"endColumn":45},{"ruleId":"257","severity":1,"message":"275","line":48,"column":13,"nodeType":"259","messageId":"260","endLine":48,"endColumn":19},{"ruleId":"257","severity":1,"message":"297","line":76,"column":19,"nodeType":"259","messageId":"260","endLine":76,"endColumn":20},{"ruleId":"257","severity":1,"message":"285","line":3,"column":10,"nodeType":"259","messageId":"260","endLine":3,"endColumn":17},{"ruleId":"257","severity":1,"message":"285","line":6,"column":10,"nodeType":"259","messageId":"260","endLine":6,"endColumn":17},{"ruleId":"280","severity":1,"message":"281","line":58,"column":58,"nodeType":"282","messageId":"283","endLine":58,"endColumn":60},{"ruleId":"257","severity":1,"message":"298","line":38,"column":19,"nodeType":"259","messageId":"260","endLine":38,"endColumn":22},{"ruleId":"257","severity":1,"message":"299","line":63,"column":27,"nodeType":"259","messageId":"260","endLine":63,"endColumn":35},{"ruleId":"280","severity":1,"message":"281","line":84,"column":40,"nodeType":"282","messageId":"283","endLine":84,"endColumn":42},{"ruleId":"280","severity":1,"message":"281","line":91,"column":48,"nodeType":"282","messageId":"283","endLine":91,"endColumn":50},{"ruleId":"271","severity":1,"message":"300","line":104,"column":8,"nodeType":"273","endLine":104,"endColumn":24,"suggestions":"301"},{"ruleId":"257","severity":1,"message":"302","line":2,"column":18,"nodeType":"259","messageId":"260","endLine":2,"endColumn":28},{"ruleId":"257","severity":1,"message":"303","line":2,"column":50,"nodeType":"259","messageId":"260","endLine":2,"endColumn":56},{"ruleId":"257","severity":1,"message":"264","line":3,"column":10,"nodeType":"259","messageId":"260","endLine":3,"endColumn":19},{"ruleId":"257","severity":1,"message":"304","line":4,"column":10,"nodeType":"259","messageId":"260","endLine":4,"endColumn":21},{"ruleId":"257","severity":1,"message":"285","line":5,"column":10,"nodeType":"259","messageId":"260","endLine":5,"endColumn":17},{"ruleId":"257","severity":1,"message":"305","line":7,"column":19,"nodeType":"259","messageId":"260","endLine":7,"endColumn":30},{"ruleId":"257","severity":1,"message":"306","line":7,"column":32,"nodeType":"259","messageId":"260","endLine":7,"endColumn":41},{"ruleId":"257","severity":1,"message":"307","line":8,"column":10,"nodeType":"259","messageId":"260","endLine":8,"endColumn":23},{"ruleId":"257","severity":1,"message":"308","line":1,"column":17,"nodeType":"259","messageId":"260","endLine":1,"endColumn":25},{"ruleId":"257","severity":1,"message":"309","line":1,"column":38,"nodeType":"259","messageId":"260","endLine":1,"endColumn":48},{"ruleId":"257","severity":1,"message":"310","line":25,"column":12,"nodeType":"259","messageId":"260","endLine":25,"endColumn":22},{"ruleId":"257","severity":1,"message":"311","line":26,"column":12,"nodeType":"259","messageId":"260","endLine":26,"endColumn":20},{"ruleId":"257","severity":1,"message":"312","line":26,"column":21,"nodeType":"259","messageId":"260","endLine":26,"endColumn":32},{"ruleId":"257","severity":1,"message":"313","line":1,"column":37,"nodeType":"259","messageId":"260","endLine":1,"endColumn":43},{"ruleId":"257","severity":1,"message":"304","line":3,"column":10,"nodeType":"259","messageId":"260","endLine":3,"endColumn":21},{"ruleId":"257","severity":1,"message":"314","line":7,"column":27,"nodeType":"259","messageId":"260","endLine":7,"endColumn":37},{"ruleId":"257","severity":1,"message":"315","line":7,"column":39,"nodeType":"259","messageId":"260","endLine":7,"endColumn":58},{"ruleId":"257","severity":1,"message":"316","line":23,"column":12,"nodeType":"259","messageId":"260","endLine":23,"endColumn":27},{"ruleId":"257","severity":1,"message":"317","line":23,"column":29,"nodeType":"259","messageId":"260","endLine":23,"endColumn":47},{"ruleId":"257","severity":1,"message":"318","line":24,"column":22,"nodeType":"259","messageId":"260","endLine":24,"endColumn":33},{"ruleId":"280","severity":1,"message":"281","line":46,"column":52,"nodeType":"282","messageId":"283","endLine":46,"endColumn":54},{"ruleId":"280","severity":1,"message":"281","line":47,"column":56,"nodeType":"282","messageId":"283","endLine":47,"endColumn":58},{"ruleId":"280","severity":1,"message":"281","line":54,"column":48,"nodeType":"282","messageId":"283","endLine":54,"endColumn":50},{"ruleId":"280","severity":1,"message":"281","line":55,"column":56,"nodeType":"282","messageId":"283","endLine":55,"endColumn":58},{"ruleId":"271","severity":1,"message":"319","line":71,"column":8,"nodeType":"273","endLine":71,"endColumn":12,"suggestions":"320"},{"ruleId":"280","severity":1,"message":"281","line":8,"column":45,"nodeType":"282","messageId":"283","endLine":8,"endColumn":47},{"ruleId":"271","severity":1,"message":"321","line":11,"column":7,"nodeType":"273","endLine":11,"endColumn":9,"suggestions":"322"},{"ruleId":"257","severity":1,"message":"323","line":4,"column":8,"nodeType":"259","messageId":"260","endLine":4,"endColumn":14},{"ruleId":"257","severity":1,"message":"324","line":14,"column":9,"nodeType":"259","messageId":"260","endLine":14,"endColumn":20},{"ruleId":"257","severity":1,"message":"325","line":2,"column":17,"nodeType":"259","messageId":"260","endLine":2,"endColumn":26},"no-native-reassign",["326"],"no-negated-in-lhs",["327"],"@typescript-eslint/no-unused-vars","'Header' is assigned a value but never used.","Identifier","unusedVar","'App' is defined but never used.","'LoginPage' is defined but never used.","'Cookie' is defined but never used.","'useEffect' is defined but never used.","'LoginInterface' is defined but never used.","'myAccount' is assigned a value but never used.","'Result' is defined but never used.","'loadCustomers' is defined but never used.","'productMocks' is defined but never used.","'addFilter' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchDefaultProductData'. Either include it or remove the dependency array.","ArrayExpression",["328"],"'result' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dataSource.pageSize', 'fetchDefaultProductData', and 'fetchInput.inputData'. Either include them or remove the dependency array.",["329"],"'useState' is defined but never used.","'CustomerForm' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useContext' is defined but never used.","'PaidApi' is defined but never used.","'PaidInvoiceForm' is defined but never used.","'AuthProvider' is defined but never used.","'InputSearch' is defined but never used.","'signIn' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'inputRef'. Either include it or remove the dependency array.",["330"],"React Hook useEffect has missing dependencies: 'handleOperation' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["331"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'p' is assigned a value but never used.","'len' is assigned a value but never used.","'t' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'productID'. Either include it or remove the dependency array.",["332"],"'DatePicker' is defined but never used.","'Select' is defined but never used.","'CustomerApi' is defined but never used.","'AuthContext' is defined but never used.","'AuthProps' is defined but never used.","'EditableTable' is defined but never used.","'Children' is defined but never used.","'useReducer' is defined but never used.","'checkLogin' is assigned a value but never used.","'userData' is assigned a value but never used.","'setUserData' is assigned a value but never used.","'Switch' is defined but never used.","'paidColumn' is defined but never used.","'productDetailColumn' is defined but never used.","'storeDataSource' is assigned a value but never used.","'setStoreDataSource' is assigned a value but never used.","'setEditable' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dataSource'. Either include it or remove the dependency array. You can also do a functional update 'setDataSource(d => ...)' if you only need 'dataSource' in the 'setDataSource' call.",["333"],"React Hook useEffect has a missing dependency: 'setMyAccount'. Either include it or remove the dependency array.",["334"],"'moment' is defined but never used.","'RangePicker' is assigned a value but never used.","'ReactText' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"335","fix":"336"},{"desc":"337","fix":"338"},{"desc":"339","fix":"340"},{"desc":"341","fix":"342"},{"desc":"343","fix":"344"},{"desc":"345","fix":"346"},{"desc":"347","fix":"348"},"Update the dependencies array to be: [fetchDefaultProductData]",{"range":"349","text":"350"},"Update the dependencies array to be: [dataSource.pageNumber, dataSource.pageSize, fetchDefaultProductData, fetchInput.inputData]",{"range":"351","text":"352"},"Update the dependencies array to be: [editing, inputRef]",{"range":"353","text":"354"},"Update the dependencies array to be: [dataSources, handleOperation, props]",{"range":"355","text":"356"},"Update the dependencies array to be: [productID, storeFetchData]",{"range":"357","text":"358"},"Update the dependencies array to be: [dataSource, id]",{"range":"359","text":"360"},"Update the dependencies array to be: [setMyAccount]",{"range":"361","text":"362"},[2609,2611],"[fetchDefaultProductData]",[3382,3405],"[dataSource.pageNumber, dataSource.pageSize, fetchDefaultProductData, fetchInput.inputData]",[1550,1559],"[editing, inputRef]",[939,952],"[dataSources, handleOperation, props]",[4382,4398],"[productID, storeFetchData]",[2827,2831],"[dataSource, id]",[290,292],"[setMyAccount]"]